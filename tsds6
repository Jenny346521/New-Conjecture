  print("Copyright(C) 2005-2024 by Lu YANG and Yong YAO");
  #print([newtsds,Horner,qusqr,newton,homog,newsds,newsds0]);
 
 with(combinat):
 with(numapprox):

 check_inequal := newtsds;

 newtsds:=proc(poly)
 local polys,np,gosds,i,t,gon,tim,n1,test,F,var,var1,rvar,nv,kk,nvar;
     t:=time():
     np:=nops([op(indets(poly))]):
     if degree(poly)<>ldegree(poly) then 
         #print(`This polynomial is not homonegeous!`):
         #print(`Homonegeous transformation`):
         F:=homog(poly):
     else
         F:=poly:
     fi:

     if F=0 then return true,`time`=time()-t fi:
     var:=[op(indets(F))]:
     nvar:=nops(var):

     test:=newton(F,var):
      if test[1]=-1 then 
          if np<>nvar then
                 test[2]:=[seq(lhs(test[2][i])=rhs(test[2][i])/rhs(test[2][1]),i=2..nvar)]:
          fi:
           RETURN(false, `time`=time()-t,  `a counter-example`=test[2] ): 
     else 
     polys:=qusqr(F):
    fi:

     if polys=1 then  RETURN(true, `time`=time()-t):
     else
       #print(`The times newsds runs`,1):
       gosds:=newsds([polys,var],var):
       n1:=nops(gosds):

       #print([n1],[time()-t]):
       for i while gosds<>[] and has(False,gosds)<>true  do 
           #print(`The times newsds runs`,i+1):
           var1:=[op(indets(gosds[1][1]))];
           gosds:=newsds(gosds,var1)-i+i:
           gon:=nops(gosds):
       od;
 
        if gosds=[] then RETURN(true, `time`=time()-t):
          else  
              member(False,gosds,`kk`):              
              if kk=1 then 
                      if np<>nvar then 
                               RETURN(false,`time`=time()-t, `a counter-example`=[seq(var[j]=gosds[kk+1][j]/gosds[kk+1][1], j=2..nvar)]):
                     fi:
                     RETURN(false,`time`=time()-t, `a counter-example`=[seq(var[j]=gosds[kk+1][j], j=1..nvar)]):
              else
                      if np<>nvar then 
                               RETURN(false,`time`=time()-t, `a counter-example`=[seq(var[j]=gosds[kk-1][j]/gosds[kk-1][1], j=2..nvar)]):
                     fi:
                     RETURN(false,`time`=time()-t, `a counter-example`=[seq(var[j]=gosds[kk-1][j], j=1..nvar)]):
        fi:
       fi:
      fi:
 end:
     
 
 newsds:=proc(polys,var)
     local ps,np,gs,i,vs:
        ps:=polys:
        np:=nops(ps):
        if np=2 and type(ps[1],polynom)=true  then gs:=newsds0(ps,var):
           if gs=[] then RETURN([]) fi:
        else  gs:=[]:          
           for i while has(False,gs)<>true and i<=np do
               gs:=[op(gs),op(newsds0(ps[i],var))]:
           od
        fi:
     RETURN(gs):
 end:
 
 
 newsds0:=proc(poly,var)
 local po,id,vs,nv,per,hr,np,fs,nf,hs,vv,i,nh,mp,t,n1,n2,k,j
 ,fstemp,hrtemp,test,pova,hrva,hst:
     po:=poly[1]:
     pova:=poly[2]:
     id:=var:        
     vs:=[op(id)]:   
     nv:=nops(vs):
     if type(po,symmfunc(op(id)))=true
     then #print(`It is symmetric`):
          hr:=Horner(po,vs):
          hrva:=subs(seq(vs[k]=t[k]/k+vs[k+1],k=1..nv-1),vs[nv]=t[nv]/nv,[hr,pova]):
          hr:=expand(hrva[1]):
          hrva:=[hr,hrva[2]]: 
          if nargs=3 then 
               hrva:=subs(seq(t[j]=vs[j],j=1..nv),hrva);            
          fi:         
          mp:=map(signum,[coeffs(hr)]): 
          n1:=nops(mp):
          if has(-1,mp)=true then
               hrva:=subs(seq(t[j]=vs[j],j=1..nv),hrva):
               test:=newton(hrva[1],vs):
               if test[1]=-1 then 
               RETURN([subs(test[2],hrva[2]),False]):
               else 
               RETURN([hrva]) 
               fi:   
          else 
               RETURN([])
          fi
     else per:=permute(nv):
          np:=nops(per):     
          fs:=[]:
          fstemp:=[]:
          for i to np do
              hr:=subs({seq(vs[k]=vs[per[i][k]],k=1..nv)},[po,pova]):
              hrtemp:=subs({seq(vs[k]=vs[per[i][k]],k=1..nv)},po):
              if has(hrtemp,fstemp)<>true then 
                 fs:=[op(fs),hr];
                 fstemp:=[op(fstemp),hrtemp]:
              else fs:=fs: fstemp:=fstemp:
              fi:
          od:
          nf:=nops(fs): 
          hs:=[]:
          hst:=[]: 
          for i while has(hs,False)<>true and i<=nf do
              hr:=fs[i][1]:
              hr:=Horner(hr,vs):
              hrva:=subs(seq(vs[k]=t[k]/(k)+vs[k+1],k=1..nv-1),vs[nv]=t[nv]/nv,[hr,fs[i][2]]):
              hr:=expand(hrva[1]):
              hrva:=[hr,hrva[2]]:
              if nargs=3 then 
                 hrva:=subs(seq(t[j]=vs[j],j=1..nv),hrva);            
                 print(hrva) 
              fi: 
              mp:=map(signum,[coeffs(hr)]):
              n1:=nops(mp):
              if has(-1,mp)=true then           
                 hrva:=subs(seq(t[j]=vs[j],j=1..nv),hrva):
                 test:=newton(hrva[1],vs):
                 if test[1]=-1 then 
                    RETURN([subs(test[2],hrva[2]),False]):
                 else 
                    if has(hrva[1],hst)<>true then 
                       hs:=[op(hs),hrva]:
                       hst:=[op(hst),hrva[1]]:
                     else  hs:=hs: hst:=hst:
                    fi:
                 fi;
             fi
          od:
          RETURN(hs); 
     fi 
 end:    
    
 Horner:=proc(poly,vars)
     local po,vs,nv,i:
       po:=poly:
       vs:=vars:
       po:=convert(po, horner, vars);
       RETURN(po)
 end:
 
 qusqr:=proc(f)
 local sqr,g,n,L,i,temp1,temp2;
       sqr:=sqrfree(f);
       g:=sqr[2];
       n:=nops(g);
       L:=signum(sqr[1]);
       for i to n do 
          temp1:=g[i][2];
          if  temp1 mod 2=0 then  temp2:=1;
          else  temp2:=g[i][1];
          fi;
          L:=L*temp2;
       od;
       RETURN(L);
  end:
 
 newton:=proc(f,var)
 local nvar,A,i,S,lcoe,f1,rb,f1var,po,j:
        nvar:=nops(var):
        A:=choose(nvar,nvar-1):
        for i to nvar do           
            S:=[seq(var[A[i][j]]=1,j=1..nvar-1)]:
            f1:=sort(subs(S,f)):
            if nops(indets(f1))<>0 then 
                lcoe:=lcoeff(f1):
                f1var:=op(indets(f1)):
                if signum(lcoe)=-1 then
                     rb:=rootbound1(f1,f1var):
                     RETURN([-1,[seq(var[A[i][j]]=1/(rb+nvar-1),j=1..nvar-1),f1var=rb/(rb+nvar-1)]]):
                fi:
            fi:
         od:
        RETURN(f): 
 end:
 
 homog:=proc(f)
 local var,n,varseq,V,i;
       var:=[op(indets(f))]:
       n:=nops(var):
       if nargs=1 then 
       varseq:={seq(var[i]=var[i]/V,i=1..n)};
       fi:
       if nargs=2 then 
       varseq:={seq(var[i]=var[i]/args[2],i=1..n)};
       fi;
       numer(subs(varseq,f));
end:

rootbound1 := proc(f, x)
 local r, d, c, p, i, j, s, rr;
       if not type(x,name) then
              error "2nd argument must be a name" fi;
       p := expand(f);
       d := degree(p,x);
       if d = 0  then  return 1 fi;
       c := coeff(p,x,d);
       p := map(abs,taylor(p-c*x^d, x, d+1));
       c := abs(c);
       r := 1;
       i := 0;
       while signum(c*r^d-subs(x = r,p)) <=0  do
           r := 2*r;
           i := i+1;
      od;
      s := r;
      i := min(i,3);
      for j to i do
           s := 1/2*s;
           rr := r-s;
          if signum(subs(x = rr,p)-c*rr^d) <0 then  r := rr fi;
      od;
      r
 end proc: